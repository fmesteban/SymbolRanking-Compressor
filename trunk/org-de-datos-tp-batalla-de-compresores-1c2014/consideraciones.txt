Pasos a tomar para la elaboracion del compresor:

Idear una estructura general (que clases, metodos, estructuras, funciones, habra)

Cargar el archivo. Como? Todo? Por partes? Hasta donde? Donde se guarda? Ir cargando por byte?

Comprimir

SR

Cargar los primeros N bytes de forma literal al nuevo archivo.

Empezar con contexto N para los proximos N simbolos? Bajarlo?

Analizar el contexto, sino, poner literal + Nº de checkeo. Acá, incluir el MTF/WFC. 

MTF/WFC

Segun el numero de char dado, hacer la reubicacion de la lista de simbolos que corresponda. Como se guarda esto? Lista? Array? (Array estatico de una).

Ver la logica de esto. Si usar MTF, FC o WFC.


Una vez que tenemos cada uno de estos char, los vamos guardando en otra estructura (todo en memoria). Que pasa si no entra en memoria? Tenemos en cuenta este caso? Habria que hacerlo por partes.

Tener en cuenta el metodo de exclusion. Como implementarlo de manera eficiente? (ver 132).

Finalizado el SR, aplicamos Estructurado

Segun el contexto, etc etc. Como armamos los contextos? Donde guardamos el intervalo? Como lo vamos guardando cuando el numero es excesivamente chico?

Como se guarda el numero? Buscar el numero binario mas chico dentro de intervalo? Como guardar esto en el archivo?



Descomprimir

SR + MTF/WFC

Exactamente lo inverso a lo que se hizo en la etapa de compresion. No deberia dar problemas si esta bien implementada la compresion.

Estructurado

Segun como se guardo el numero, ir descifrando el numero. Como se carga el numero? Como se va haciendo la comparacion? Cuanto terminos? Cada cuanto hay que actualizar? Misma frecuencia que al comprimir?
